<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--所有配置可参考官方文档：http://www.mybatis.org/mybatis-3/zh/configuration.html  -->
<configuration>
	<!-- Mybatis极为重要的设置，会改变它的行为 -->
	<settings>
		<setting name="cacheEnabled" value="true"/>
		<setting name="lazyLoadingEnabled" value="false"/>
	</settings>
	<!-- 设置别名 :类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余-->
	<typeAliases>
		<package name="com.wtw.pojo"/>
	</typeAliases>
	<!-- 类型处理器: 无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。mybatis有一个默认的类型处理器列表,
		你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。 具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口， 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler，
		 然后可以选择性地将它映射到一个 JDBC 类型。-->
	<typeHandlers>
		<!-- <typeHandler handler="自定义的类型处理器"/> -->
	</typeHandlers>
	<!-- 
	MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者共享相同 Schema 的多个生产数据库， 想使用相同的 SQL 映射。许多类似的用例。
	不过要记住：尽管可以配置多个环境，每个 SqlSessionFactory 实例只能选择其一。
	所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单：
	每个数据库对应一个 SqlSessionFactory 实例
 	-->
	<!-- <environments default="development">
		<environment id="development">
			<dataSource type=""></dataSource>
			<transactionManager type=""></transactionManager>
		</environment>
	</environments> -->
	<!-- Register all interfaces in a package as mappers告诉了MyBatis 去哪里找映射文件 -->
	<!-- <mappers>
		<package name="com.wtw.dao"/>
	</mappers> -->
</configuration>